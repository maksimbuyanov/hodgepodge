import { FC, memo } from "react"
import cls from "./ArticlePage.module.scss"
import { classNames } from "@/shared/lib"
import { useTranslation } from "react-i18next"
import { ArticleList } from "@/entities/Article"
import { Country } from "@/entities/Country"
import { Currency } from "@/entities/Currency"
import images from "@/shared/assets/forTests/user.png"

interface ArticlePageProps {
  className?: string
}

const art = {
  id: "2",
  user: {
    id: "1",
    username: "TwitterChief",
    avatar: images,
  },
  title: "Тренды JavaScript на 2015 год",
  image:
    "https://habrastorage.org/r/w1560/files/3ac/722/88a/3ac72288a339474392e2d855a352d9dd.png",
  subtitle: "Блог компании Microsoft",
  views: 112869,
  createdAt: "02.01.2015",
  type: ["Разработка веб-сайтов", "JavaScript", "TypeScript"],
  blocks: [
    {
      id: "0",
      type: "COPYRIGHT",
      url: "https://habr.com/ru/company/microsoft/blog/247229/",
      text: "Ссылка на оригинал",
    },
    {
      id: "1",
      type: "TEXT",
      paragraphs: [
        "Всем привет! Мы как-то задумали сделать легкий вводный курс на тему JavaScript и разработки приложений (он, кстати, скоро будет опубликован): и, пока я собирал материалы к нему, как-то само собой выяснилось, что есть довольно много вещей, которые, так сказать, находятся на переднем крае развития JavaScript. Отсюда родилась идея сделать отдельную обзорную статью в жанре «X трендов на год Y по технологии Z».",
        "Многие из тех, вещей, которые я буду описывать, можно попробовать в той или иной степени уже сегодня (собственно, иначе я бы говорил о космическом будущем, а не о трендах). В этом есть несомненный плюс: если у вас будет свободное время (а на праздниках его обычно много), вам будет чем заняться. Да и, в целом, хорошо начинать новый год с расширения своих горизонтов!",
      ],
    },
    {
      id: "2",
      type: "TEXT",
      title: "1. ECMAScript 6",
      paragraphs: [
        "Если вы занимаетесь веб-разработкой, вы наверняка на себе прочувствовали все прелести и ограничения JavaScript. Когда Брендан Айк в 1995 году придумывал на скорую руку JavaScript, навряд ли он мог предположить, во что разовьются через 15-20 лет веб-технологии и какие фокусы разработчики будут вытворять, используя его детище.",
        "Сложность современных веб-решений давно требует существенного пересмотра того, как мы эти решения создаем, поэтому не случайно столь большое внимание разработчиками браузеров (в частности) уделяется сегодня следующей версии стандарта JavaScript – ECMAScript 6.",
        "Новый стандарт (который, кстати, в пику несостоявшемуся выпуску ES4 иногда называют как ES6 “Harmony”) несет давно ожидаемые возможности, которые существенно облегчат создание сложных решений: классы, модули, коллекции, итераторы, генераторы, прокси, типизированные массивы, обещания, новые методы и свойства для стандартных объектов и новые синтаксические возможности и еще много чего.",
      ],
    },
    {
      id: "3",
      type: "IMAGE",
      title: "ECMAScript 6",
      src: "https://habrastorage.org/files/780/1e1/ec0/7801e1ec06f7461c8766b6e81007fd16.PNG",
    },
    {
      id: "4",
      type: "CODE",
      code: '// lib/math.js\nexport function sum(x, y) {\n    return x + y;\n}\nexport var pi = 3.141593;\n\n// app.js\nmodule math from "lib/math";\nalert("2π = " + math.sum(math.pi, math.pi));',
    },
    {
      id: "5",
      type: "TEXT",
      paragraphs: [
        "На почве модулей, кстати, за последнее время развилось довольно много интересных решений, взять хотя бы RequireJS или Browserify.",
        "Писать и поддерживать сложные приложения станет сильно проще. Посмотреть, как выглядят новые фишки языка в коде можно в обзоре “Overview of ECMAScript 6 features” от Luke Hoban.",
        "Следить за внедрением поддержки новых возможностей ES6 можно по таблице совместимости с ES6. А попробовать многие возможности уже сейчас можно в свежей сборке Internet Explorer Technical Preview, доступной в рамках программы Windows Insider.",
        "Кстати, в конце 2015 нас ждет большой праздник – 20-летие JavaScript. Фактически, новый стандарт – это попытка сделать JavaScript хорошим языком (хотя некоторые его концепции навряд ли покажутся новичкам более легкими, чем прототипное наследование). А еще есть прогноз, что стандарт ES6 будет утвержден именно в 2015 году. Впрочем, непосредственное внедрение нового стандарта в практику разработки займет не один год.",
      ],
    },
    {
      id: "6",
      type: "TEXT",
      title: "2. Типизированный JavaScript",
      paragraphs: [
        "Пока мы уже несколько лет ждем пришествия новых возможностей в JavaScript, дух времени подсказал, что одна из самых больших проблем JS при создании сложных решений – это типизация, точнее, чуть менее, чем полное ее отсутствие.",
        "Конечно, в JavaScript есть некоторое количество стандартных типов, но все остальное сводится к ним, требует неудобных проверок, и вообще одна из прелестей JS как раз в его динамичности, что, однако, никак не помогает делать сложные и надежные решения.",
        "Как на зло, оказалось, что работа с файлами и графикой (привет WebGL!) требуют умения работать с типами конкретной размерности, а не единым обобщенным Number, поэтому, кстати, появился отдельный стандарт для типизированных массивов, который теперь станет частью ES6.",
        "В общем, когда за дело взялся Андерс Хейлсберг (Delphi и C# — его детище), появился TypeScript. TS – это надмножество JS, добавляющее в язык статическую типизацию на этапе разработки, а также многие возможности из ES6. Конечно, TS появился не просто так, а в том числе из внутренней потребности Microsoft в удобном создании сложных веб-приложений.",
      ],
    },
    {
      id: "7",
      type: "CODE",
      code: '// TypeScript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}',
    },
    {
      id: "8",
      type: "TEXT",
      paragraphs: [
        "(Аналогичная потребность созрела и в других компаниях – обратите внимание на новые проекты по типизации от Facebook (Flow) и Google (AtScript). Тут самое место для большой надежды, что в 2015г. мы не получим очередные новые несовместимые технологии.)",
        "Прелесть TypeScript в том, что, пока вы пишите код (особенно если вы делаете это в Visual Studio, но не обязательно), вы получаете возможность удобно описывать сложные структуры данных, а компилятор при этом помогает вам отслеживать, что вы нигде ничего не напутали и правильно работаете с типами.",
        "Еще одно замечательное свойство TS, точнее его компилятора (который, кстати, открыт также, как и сам язык!), состоит в том, что в результате компиляции получается чистый код на JavaScript, причем, примерно такой, какой вы бы и сами написали, следуя современным практикам:",
      ],
    },
    {
      id: "9",
      type: "CODE",
      code: '// TypeScript to JavaScript\nvar Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return "Hello, " + this.greeting;\n    };\n    return Greeter;\n})();',
    },
    {
      id: "10",
      type: "TEXT",
      paragraphs: [
        "Таким образом, на выходе получается код, работающий в современных браузерах на любых операционных системах. К слову, под Node.js тоже можно писать на TypeScript.",
        "Кстати, так как любой код на JS уже является кодом на TS, то естественным образом возникает вопрос, как существующий код использовать типизированным образом? Ответ на этот вопрос находится в большом проекте DefinitelyTyped, в рамках которых уже типизировано большинство самых распространенных библиотек.",
        "В перспективе следующая большая версия TypeScript 2.0 должна стать надмножеством ES6. Попробовать TS в браузере прямо сейчас можно в нашей песочнице.",
        "В целом, если вы пишите код на JavaScript, внедрение в работу TypeScript может стать одной из самых важных ваших инвестиций в 2015 г.",
      ],
    },
  ],
} as any

export const ArticlePage: FC<ArticlePageProps> = props => {
  const { className = "" } = props
  const { t } = useTranslation("article")
  return (
    <div className={classNames(cls.ArticlePage, {}, [className])}>
      <ArticleList
        articles={new Array(16).fill(0).map((i, index) => ({
          ...art,
          id: index,
        }))}
      />
    </div>
  )
}

export default memo(ArticlePage)
